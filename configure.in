# Process this file with autoconf to produce a configure script.
AC_INIT(step.cpp)
AC_CONFIG_HEADER(config.h)
AC_PREREQ(2.50)

VERSION=0.2
AC_DEFINE_UNQUOTED(VERSION, "$VERSION", [Define to the version number string.])
AC_SUBST(VERSION)

# Fortran libraries are (probably) required for BLAS and LAPACK:
AC_F77_LIBRARY_LDFLAGS
LIBS="$LIBS $FLIBS"

DEFAULTFLAGS="no"
if test "x" == "x$CXXFLAGS"; then
   DEFAULTFLAGS=""
fi

# Checks for programs.
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_INSTALL

AC_CHECK_PROG(LATEX2HTML, latex2html, latex2html)
if test -z "$LATEX2HTML"; then
    AC_MSG_WARN([Cannot find latex2html in your path!])
    LATEX2HTML='echo not running latex2html...'
fi
AC_SUBST(LATEX2HTML)

# check how to transform the name of the installed program:
AC_ARG_PROGRAM

# Checks for header files.
#AC_CHECK_HEADERS(unistd.h getopt.h)

AC_CHECK_LIB(m, sqrt)

###########################################################################

# Checks for BLAS libraries:

save_LIBS0="$LIBS"

# Generic BLAS:
# FIXME: what libs need -lblas in addition to accelerated blas?
AC_CHECK_LIB(blas, main)

# remember current libs, so we can check if any libs were found below.
save_LIBS="$LIBS"

AC_ARG_WITH(fastblas, [  --without-fastblas      don't use accelerated BLAS], ok=$withval, ok=yes)
if test "$ok" = "no"; then
	save_LIBS="xxxxxxxx"
elif test "$ok" != "yes"; then
	# user specified a BLAS library to try on the command line
	AC_CHECK_LIB($ok, main)
fi

if test "$save_LIBS" = "$LIBS"; then
	# BLAS in Cray libsci?  Don't use -lblas if so.
	AC_CHECK_LIB(sci, CGEMM, LIBS="-lsci $save_LIBS0")
fi

if test "$save_LIBS" = "$LIBS"; then
	# BLAS in Alpha CXML library?
	AC_CHECK_LIB(cxml, dgemm_)
fi

if test "$save_LIBS" = "$LIBS"; then
	# BLAS in Alpha DXML library? (now called CXML, see above)
	AC_CHECK_LIB(dxml, dgemm_)
fi

if test "$save_LIBS" = "$LIBS"; then
	# Check for BLAS in Sun Performance library:
	# old: AC_CHECK_LIB(SUNWPro_lic, __lsp_rethread_mn_ph_)
	AC_CHECK_LIB(sunmath, acosp)
	AC_CHECK_LIB(sunperf, dgemm_,
        	[LIBS="-xlic_lib=sunperf $LIBS"])
fi

if test "$save_LIBS" = "$LIBS"; then
	# Check for BLAS in SCSL and SGIMATH libraries (prefer SCSL):
	AC_CHECK_LIB(scs, dgemm_,
	             LIBS="-lscs $LIBS", 
		     AC_CHECK_LIB(complib.sgimath, dgemm_))
fi

if test "$save_LIBS" = "$LIBS"; then
	# Checks for BLAS in IBM ESSL library
	AC_CHECK_LIB(essl, dgemm)
fi

if test "$save_LIBS" = "$LIBS"; then
	# Checks for ATLAS BLAS library:
	AC_CHECK_LIB(atlas, ATL_xerbla)
	if test "$save_LIBS" != "$LIBS"; then
		# check for other atlas libs:
		AC_CHECK_LIB(cblas, cblas_dgemm)
		AC_CHECK_LIB(f77blas, main)
	fi
fi

if test "$save_LIBS" = "$LIBS"; then
	# Checks for BLAS dgemm/sgemm libraries (produced by PhiPACK):
	AC_CHECK_LIB(dgemm, main)
	AC_CHECK_LIB(sgemm, main)
fi

if test "$save_LIBS" = "$LIBS"; then
	# Optimized BLAS for Pentium Pro (from ASCII Red project):
	# (see http://www.cs.utk.edu/~ghenry/distrib/)
	AC_CHECK_LIB(blasppro1.1o,main)
fi

###########################################################################

# Checks for LAPACK library.

# First, for Cray, see if library is available without -llapack, then
# try -llapack.
AC_CHECK_FUNC(CGEEV,,AC_CHECK_LIB(lapack, main))

###########################################################################

RUNCODE=""

##############################################################################
# Check for MPI library

AC_ARG_WITH(mpi, [AC_HELP_STRING([--with-mpi],[enable MPI parallelization])],
                  with_mpi=$withval, with_mpi=no)
if test "x$with_mpi" = "xyes"; then
        AC_CHECK_PROGS(MPICC, mpicc hcc mpcc mpcc_r, $CC)
        CC="$MPICC"
        AC_CHECK_PROGS(MPICXX, mpiCC mpCC, $CXX)
        CXX="$MPICXX"
        if test x = x"$MPILIBS"; then
                AC_CHECK_FUNC(MPI_Init, [MPILIBS=" "])
        fi
        if test x = x"$MPILIBS"; then
                AC_CHECK_LIB(mpi, MPI_Init, [MPILIBS="-lmpi"])
        fi

        if test x = x"$MPILIBS"; then
                AC_MSG_ERROR(could not find mpi library for --with-mpi)
        fi

        LIBS="$MPILIBS $LIBS"

        AC_DEFINE(HAVE_MPI,1,[Define if you have & link an MPI library.])

# Figure out the number of processors so we can quickly build the docs and
# run the tests...

        cat > test_num_processors.c <<MYEOF
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
  long nprocs;
  nprocs = sysconf(_SC_NPROCESSORS_ONLN);
  if (nprocs < 1)
    nprocs = 1;
  printf ("%ld\n",nprocs);
  exit (EXIT_SUCCESS);
}
MYEOF
        $CC -o test_num_processors test_num_processors.c
        NUMPROCS=`./test_num_processors`
        rm -f test_num_processors test_num_processors.c
        echo Looks like we have got "$NUMPROCS" processors

        RUNCODE="mpirun -np $NUMPROCS"
fi


# Try to guess some good optimization flags if CXXFLAGS is empty...
if test "x" == "x$DEFAULTFLAGS"; then
   CXXFLAGS_my_saved="-g"
   CFLAGS_my_saved="$CFLAGS"
   CFLAGS="$CXXFLAGS_my_saved -O3"
   AC_COMPILE_IFELSE([int main() { return 0; }],
       [echo Looks like -O3 is good && CXXFLAGS_my_saved="$CFLAGS"],
       [echo Looks like -O3 is bad  && CFLAGS="$CXXFLAGS_my_saved"])
   CFLAGS="$CFLAGS -funroll-loops"
   AC_COMPILE_IFELSE([int main() { return 0; }],
       [echo Looks like -funroll-loops is good && CXXFLAGS_my_saved="$CFLAGS"],
       [echo Looks like -funroll-loops is bad  && CFLAGS="$CXXFLAGS_my_saved"])
   CFLAGS="$CFLAGS -msse2"
   AC_COMPILE_IFELSE([int main() { return 0; }],
       [echo Looks like -msse2 is good && CXXFLAGS_my_saved="$CFLAGS"],
       [echo Looks like -msse2 is bad  && CFLAGS="$CXXFLAGS_my_saved"])
   CFLAGS="$CFLAGS -mfpmath=sse"
   AC_COMPILE_IFELSE([int main() { return 0; }],
       [echo Looks like -mfpmath=sse is good && CXXFLAGS_my_saved="$CFLAGS"],
       [echo Looks like -mfpmath=sse is bad  && CFLAGS="$CXXFLAGS_my_saved"])
   CFLAGS="$CFLAGS -mcpu=pentium4"
   AC_COMPILE_IFELSE([int main() { return 0; }],
       [echo Looks like -mcpu=pentium4 is good && CXXFLAGS_my_saved="$CFLAGS"],
       [echo Looks like -mcpu=pentium4 is bad  && CFLAGS="$CXXFLAGS_my_saved"])

   CXXFLAGS="$CFLAGS"
   CFLAGS="$CFLAGS_my_saved"
fi

DACTYL_CXX="$CXX"
DACTYL_CXXFLAGS="$CXXFLAGS"
AC_SUBST(DACTYL_CXX)
AC_SUBST(DACTYL_CXXFLAGS)
AC_SUBST(RUNCODE)

AC_OUTPUT(Makefile doc/Makefile tests/Makefile)
